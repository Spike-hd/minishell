
https://github.com/Hqndler/42-minishell?tab=readme-ov-file
QnYosa minishell

Le but est de parser les instructions de minishell :

On va utiliser une matrice

Qu'est ce qui separe les arguments ?
Les arguments sont separes par des espaces SAUF si ils sont entre "" ou ''
	-> Dans ce cas ils sont separes par la fin du "" ou '

Que fais ";" ?
Le point-virgule (;) dans un shell est utilisé pour exécuter plusieurs commandes successivement, l'une après l'autre, sur la même ligne.
Cela permet de séparer les commandes et de les exécuter dans l'ordre où elles sont écrites, sans tenir compte de la réussite ou de l'échec des précédentes.


Il faut donc parse non pas jusqu'a la fin de la string mais :
	-> soit jusqu'a la fin de la string
	-> soit jusqu'a (;)


Point important dans le parsing :

Cas 1 :
	hduflos@c3r2p10 ~ % cat born2beroot/signature.txt
	b33931a5788f8440c605f222b2eab17e35e639c3

Cas 2 :
	hduflos@c3r2p10 ~ % cat "born2beroot/signature.txt"
	b33931a5788f8440c605f222b2eab17e35e639c3

Cas 3 :
	hduflos@c3r2p10 ~ % cat"born2beroot/signature.txt"
	zsh: no such file or directory: catborn2beroot/signature.txt

Meme si on utilise des "" ou '' il faut laisser un espace sinon le code n'est pas reconnu.



Le parsage se deroule donc ainsi :
	while (str[i])
		-> A chaque espace = nouvel arg SAUF si FLAG_GUILLEMET = TRUE


Le premier parsage est realise.
Dans le premier parsage qu'est ce que j'ai fait :
J'ai creer un programme minishell qui fonctionne comme une boucle infinie
	Dans cette boucle infinie se trouve une autre boucle qui prend en compte les ';'
		-> Tant qu'il y a des ; on reste dans cette 2nd boucle
Enfin, chaque ligne donne en entree et parser correctement en fonction des quotes
	-> Chaque argument est correctement parse puis envoye dans une matrice
		-> Chaque ligne de la matrice correspond a un argument
			Par exemple : echo bonjour > test
			lines[0] = echo
			lines[1] = bonjour
			lines[2] = >
			lines[3] = test

Que faire mnt ?

J'ai parse en tenant correctement compte des quotes et des espaces, il faut maintenant que je retire ces guillemets pour qu'il puisse etre interprete correctement
Probleme :
Je ne peux pas juste retirer les guillemets.
Certaines commandes auront un comportement different avec ou sans guillemets.

Exemple :
"ls" fera correctement la commande ls
mais :
	->echo bonjour ">" test => cela va simplement afficher "bonjour > test"
	Ce n'est pas ce que l'on veut, on veut une redirection de la sortie et avoir 'bonjour' dans un fichier 'test'

	Meme chose pour '$' :
	-> echo "$name" doit afficher l'expansion de name et aura donc un resultat different de echo $name

Cela est du au meta characters :
Les metacharacters sont des characters speciaux de Linux qui ont une interpretation.
Si ils sont entre guillemets ils perdent leur interpretation sauf $ avec ""
Liste des metacharacters : <, >, <<, >>, | et le cas special de $


Idee :

Je cree une structure tel que :

typedef struct s_args
{
	int				index;
	char			**av;
	bool			metacharacters;
	int				*was_in_quote; // tableau d'int de taille index qui represente pour chaque index l'argument : 1 si meta 0 sinon
}				t_args;



Ou j'en suis maintenant :

J'ai parse correctement et en respectant les quotes les arguments.
J'ai maintenant un tableau qui recence toute les informations necessaire.
ce qu'il me reste a faire :
J'ai un probleme dans la destruction des guillemets pour les strings qui en ont besoin
Je dois, avant de parse et initialiser ma 2nd structure gerer tous les $ pour les transformer par ce qu'ils représentent directement
